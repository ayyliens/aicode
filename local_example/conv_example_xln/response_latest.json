{
  "id": "chatcmpl-8TOV53CJ4wOPYOHwyx2YPh0MZbYeT",
  "object": "chat.completion",
  "created": 1702016383,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": null,
        "function_call": {
          "name": "write_files",
          "arguments": "{\n  \"files\": [\n    {\n      \"body\": \"package xln\\n\\nimport \\\"fmt\\\"\\n\\nvar LANGS = []string{LANG_EN, LANG_ES, LANG_IT, LANG_PT}\\n\\nconst (\\n\\tLANG_DEFAULT = LANG_EN\\n\\tLANG_EN      = `en`\\n\\tLANG_FR      = `fr`\\n\\tLANG_ES      = `es`\\n\\tLANG_IT      = `it`\\n\\tLANG_PT      = `pt`\\n)\\n\\nvar XLN_INVALID_LONGITUDE = Xln[func(lon float64) string]{\\n\\tLANG_EN: func(lon float64) string { return fmt.Sprintf(`invalid longitude %v`, lon) },\\n\\tLANG_FR: func(lon float64) string { return fmt.Sprintf(`longitude invalide %v`, lon) },\\n\\tLANG_ES: func(lon float64) string { return fmt.Sprintf(`longitud inválida %v`, lon) },\\n\\tLANG_IT: func(lon float64) string { return fmt.Sprintf(`longitudine non valida %v`, lon) },\\n\\tLANG_PT: func(lon float64) string { return fmt.Sprintf(`longitude inválida %v`, lon) },\\n}.ValidGet()\\n\\nvar XLN_INVALID_LATITUDE = Xln[func(lat float64) string]{\\n\\tLANG_EN: func(lat float64) string { return fmt.Sprintf(`invalid latitude %v`, lat) },\\n\\tLANG_FR: func(lat float64) string { return fmt.Sprintf(`latitude invalide %v`, lat) },\\n\\tLANG_ES: func(lat float64) string { return fmt.Sprintf(`latitud inválida %v`, lat) },\\n\\tLANG_IT: func(lat float64) string { return fmt.Sprintf(`latitudine non valida %v`, lat) },\\n\\tLANG_PT: func(lat float64) string { return fmt.Sprintf(`latitude inválida %v`, lat) },\\n}.ValidGet()\\n\\nvar XLN_MISSING_GEOGRAPHIC_COORDINATES = XlnS{\\n\\tLANG_EN: `missing geographic coordinates`,\\n\\tLANG_FR: `coordonnées géographiques manquantes`,\\n\\tLANG_ES: `faltan coordenadas geográficas`,\\n\\tLANG_IT: `mancano coordinate geografiche`,\\n\\tLANG_PT: `faltam coordenadas geográficas`,\\n}.ValidGet()\\n\\nvar XLN_CURRENCY_NOT_EQUALS = Xln[func(exp, got string) string]{\\n\\tLANG_EN: func(exp, got string) string {\\n\\t\\treturn fmt.Sprintf(`expected currency %q, got %q`, exp, got)\\n\\t},\\n\\tLANG_FR: func(exp, got string) string {\\n\\t\\treturn fmt.Sprintf(`devise attendue %q, obtenue %q`, exp, got)\\n\\t},\\n\\tLANG_ES: func(exp, got string) string {\\n\\t\\treturn fmt.Sprintf(`se esperaba la moneda %q, pero se obtuvo %q`, exp, got)\\n\\t},\\n\\tLANG_IT: func(exp, got string) string {\\n\\t\\treturn fmt.Sprintf(`si aspettava la valuta %q, ma si è ottenuto %q`, exp, got)\\n\\t},\\n\\tLANG_PT: func(exp, got string) string {\\n\\t\\treturn fmt.Sprintf(`esperava-se a moeda %q, mas obteve-se %q`, exp, got)\\n\\t},\\n}.ValidGet()\\n\\nvar XLN_MISSING_CURRENCY = XlnS{\\n\\tLANG_EN: `missing currency`,\\n\\tLANG_FR: `devise manquante`,\\n\\tLANG_ES: `falta moneda`,\\n\\tLANG_IT: `mancanza di valuta`,\\n\\tLANG_PT: `falta de moeda`,\\n}.ValidGet()\\n\\nvar XLN_CURRENCY_INVALID = Xln[func(currency string) string]{\\n\\tLANG_EN: func(currency string) string {\\n\\t\\treturn fmt.Sprintf(`%v doesn't appear to be a valid currency`, currency)\\n\\t},\\n\\tLANG_FR: func(currency string) string {\\n\\t\\treturn fmt.Sprintf(`%v ne semble pas être une devise valide`, currency)\\n\\t},\\n\\tLANG_ES: func(currency string) string {\\n\\t\\treturn fmt.Sprintf(`%v no parece ser una moneda válida`, currency)\\n\\t},\\n\\tLANG_IT: func(currency string) string {\\n\\t\\treturn fmt.Sprintf(`%v non sembra essere una valuta valida`, currency)\\n\\t},\\n\\tLANG_PT: func(currency string) string {\\n\\t\\treturn fmt.Sprintf(`%v não parece ser uma moeda válida`, currency)\\n\\t},\\n}.ValidGet()\\n\",\n      \"name\": \"xln.go\"\n    }\n  ]\n}"
        }
      },
      "finish_reason": "function_call"
    }
  ],
  "usage": {
    "prompt_tokens": 1351,
    "completion_tokens": 1059,
    "total_tokens": 2410
  },
  "system_fingerprint": null
}
