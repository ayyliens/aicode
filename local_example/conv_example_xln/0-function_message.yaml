role: function
name: read_files
content: '{"files":[{"name":"xln.go","body":"package xln\n\nimport \"fmt\"\n\nvar LANGS = []string{LANG_EN}\n\nconst (\n\tLANG_DEFAULT = LANG_EN\n\tLANG_EN      = `en`\n\tLANG_FR      = `fr`\n)\n\nvar XLN_INVALID_LONGITUDE = Xln[func(lon float64) string]{\n\tLANG_EN: func(lon float64) string { return fmt.Sprintf(`invalid longitude %v`, lon) },\n\tLANG_FR: func(lon float64) string { return fmt.Sprintf(`longitude invalide %v`, lon) },\n}.ValidGet()\n\nvar XLN_INVALID_LATITUDE = Xln[func(lat float64) string]{\n\tLANG_EN: func(lat float64) string { return fmt.Sprintf(`invalid latitude %v`, lat) },\n\tLANG_FR: func(lat float64) string { return fmt.Sprintf(`latitude invalide %v`, lat) },\n}.ValidGet()\n\nvar XLN_MISSING_GEOGRAPHIC_COORDINATES = XlnS{\n\tLANG_EN: `missing geographic coordinates`,\n\tLANG_FR: `coordonnées géographiques manquantes`,\n}.ValidGet()\n\nvar XLN_CURRENCY_NOT_EQUALS = Xln[func(exp, got string) string]{\n\tLANG_EN: func(exp, got string) string {\n\t\treturn fmt.Sprintf(`expected currency %q, got %q`, exp, got)\n\t},\n\tLANG_FR: func(exp, got string) string {\n\t\treturn fmt.Sprintf(`devise attendue %q, obtenue %q`, exp, got)\n\t},\n}.ValidGet()\n\nvar XLN_MISSING_CURRENCY = XlnS{\n\tLANG_EN: `missing currency`,\n\tLANG_FR: `devise manquante`,\n}.ValidGet()\n\nvar XLN_CURRENCY_INVALID = Xln[func(currency string) string]{\n\tLANG_EN: func(currency string) string {\n\t\treturn fmt.Sprintf(`%v doesn''t appear to be a valid currency`, currency)\n\t},\n\tLANG_FR: func(currency string) string {\n\t\treturn fmt.Sprintf(`%v ne semble pas être une devise valide`, currency)\n\t},\n}.ValidGet()\n"}]}'
